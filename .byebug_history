c
@user.id
@user
c
ts = validate_data(transaction_params, params['transaction'])
ts
c
@ts.save
@ts
c
user.cookie
user = User.find_by_id(params['user_id'])
params['user_id']
user
c
user.cookie == cookies[:user]
user = User.find_by_id(params['user_id'])
session[:current_user] == params['user_id'].to_i
params["user_id"]
session[:current_user]
c
cookies[:user]
session[:current_user]
session[:user]
session
params
c
User.last.delete
SecureRandom.hex(12)
SecureRandom
Base64
c
User.find_by_user(user_params[:user])
user_params = params[:user]
User.find_by_user('ryanvalle')
BCrypt::Password.create('test')
BCrypt
BCryot
params[:user]
params
c
cookies[:user_auth] = {value: "test", expires: 1.hour.from_now}
cookies[:user_auth]
cookies[:user_auth] = {value: "test", expires: "1.hour.from_now"}
cookies
c
ts
c
n
user
n
user
n
user
new_user
n
params[:username] = 'ryanvalle'
params[:username]
params[:username
user
n
c
@ts.save
@ts
c
income/graph_total
graph_total = income.to_f + expense.to_f
income / graph_total.to_f
income / graph_total
income
graph_total
c
@graph[:income]
@graph
c
a
data.each { |t| a += t.amount if t.income }
a = 0
data
c
this
self
data
c
@transactions.class
@transactions
@transactios
@transaction
c
@transaction
this
self
self.each
self.each { |t| a += t.amount }
self.each { |t| a += t.amount if t.income }
a = 0
self.first
that
this
self
c
x.category
Category.all
x
c
data
data['transaction_on'] = params['transaction_on'].to_datetime
data['transaction_on'] = Time.at(params['transaction_on'].to_datetime).to_datetime
params['transaction_on'].to_datetime
params['transaction_on'].to_date
params['transaction_on']
params
c
data
n
data['amount'] = (params['amount'].to_f * 100).to_i
data
c
params['transaction']
params['amount']
params['amount'
params
data
c
Time.now().to_i
Time.now().to_s
Time.now()
DateTime.new()
a.strftime('%m-%d-%Y @ %H:%M')
a.strftime('%m-%d-%Y')
a.strftime('%F')
a.strftime('%Y')
a.class
a = tns.transaction_on
tns.transaction_on
c
tns.payee.payee
tns.payee
c
Time.at(1318996912).to_datetime
data['transaction_on'].to_d
data['transaction_on'].to_date
data['transaction_on']
data
c
data
c
data
c
data['date'] = params['date']
params['date']
c
params['date']
params
transaction_params
src
c
source
data
c
transaction_params
params['date']
params
data
data['date']
c
ts
exit
transaction_params
transaction_params['payee_id'] = payee.id
transaction_params
payee
c
payee
n
payee.id
payee = Payee.find_by_payee(new_payee)
payee.id
payee
paee
c
transaction_params
c
transaction_params
c
transaction_params['payee_id'] = payee.id
payee.id
payee = Payee.find_by_payee(new_payee)
payee.save
payee
c
params['payee'].downcase
params['payee']
c
user
user = User.create(user: new_user) 
c
Transaction.all
@transaction.all
@transactions = Transaction.create(transaction_params)
continue
params
@transactions = Transaction.create(params)
Transaction
Transactions
Transactions.create(params)
Transactions.create
params
